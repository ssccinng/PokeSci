@page "/MatchRun/{Id:int}"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using PokemonIsshoni.Net.Client.Pages.PCLCard
@using PokemonIsshoni.Net.Shared.Info

@inject ISnackbar Snackbar
@inject HttpClient Http
@inject PCLServices MatchService
@inject UserInfoServices UserServices
@inject NavigationManager Navigation
@inject IDialogService Dialog
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (_pclMatch == null)
{

}
else
{
    <MudContainer MaxWidth=MaxWidth.Medium>
    <MudPaper Class="tw-p-5">
        <MudText Typo=Typo.h4>@_pclMatch.Name</MudText>
        <MudLink Href=@($"MatchDetail/{Id}") Class="tw-text-sm tw-mt-3"><MudIcon Style="margin-bottom: 0.15rem" Icon=@Icons.Material.Filled.ArrowBack />返回比赛主页</MudLink>

        <MudTabs  Elevation="0" Rounded="true"  Color="@Color.Default" Class="tw-mt-2" @bind-ActivePanelIndex="selectId">
            <MudTabPanel Text="比赛信息">
                <MudGrid Class="tw-p-3">
                    <MudItem xs="12">
                        <MudText Typo="Typo.h5" Class="tw-mt-5 tw-font-extrabold">已报名选手</MudText>
                    </MudItem>
                    <MudItem xs="12">
                        <MudGrid>
                            @foreach (var player in _pclMatch.PCLMatchPlayerList)
                            {
                                <MudItem xs=12 md=4 lg=3 Class="tw-flex tw-justify-center">
                                    <PlayerSignInMatchCard PCLMatchPlayer=player />
                                </MudItem>
                            }
                        </MudGrid>
                    </MudItem>


                </MudGrid>

            </MudTabPanel>
            @{
                int idx = 1;
            }
            @if (_pclMatch.MatchState > MatchState.Registering)
            {
                foreach (var pclRound in _pclMatch.PCLMatchRoundList)
                {
                    int roundIdx = idx;
                    switch (pclRound.PCLRoundType)
                    {
                        case RoundType.Swiss:
                            <MudTabPanel Text=@($"{roundIdx}. 瑞士轮")>
                                @if (pclRound.PCLRoundPlayers != null && pclRound.Swissidx > -1)
                                {
                                    <MudTabs>
                                        <MudTabPanel Text="战绩表">
                                            <MudText Align="Align.Center" Typo="Typo.h4" Class="tw-mt-5 tw-font-extrabold">瑞士轮对阵情况</MudText>
                                            <MudTable Elevation="0" Dense=true Items="pclRound.PCLRoundPlayers.OrderBy(s => s.Rank)" Class="tw-mt-5 mud-bold-table">
                                                <HeaderContent>
                                                    @*<MudTh Style="width:10px"></MudTh>*@
                                                    <MudTh Style="font-weight:800; width:100px">排名</MudTh>
                                                    <MudTh Style="font-weight:800; width:260px">参赛ID</MudTh>
                                                    <MudTh Style="font-weight:800; width:100px">战绩</MudTh>
                                                    <MudTh Style="font-weight:800; width:170px">对手胜率</MudTh>
                                                    <MudTh Style="font-weight:800; width:170px">对手的对手胜率</MudTh>
                                                    <MudTh></MudTh>

                                                </HeaderContent>
                                                <RowTemplate>
                                                     @*<MudTd />*@
                                                    <MudTd DataLabel="排名">@context.Rank</MudTd>
                                                    <MudTd DataLabel="参赛ID">@_matchUserDatasDic[context.UserId].ShadowId</MudTd>
                                                    <MudTd DataLabel="战绩">@($"{context.Win}-{context.Draw}-{context.Lose}")</MudTd>
                                                    <MudTd DataLabel="对手胜率">@context.OppRatio.ToString("P2")</MudTd>
                                                    <MudTd DataLabel="对手的对手胜率">@context.OppOppRatio.ToString("P2")</MudTd>
                                                     <MudTd />


                                            </RowTemplate>
                                    </MudTable>
                                        </MudTabPanel>
                                    <MudTabPanel Text="对阵表1">

                                        </MudTabPanel>
                                        <MudTabPanel Text="对阵表2">

                                        </MudTabPanel>
                                        <MudTabPanel Text="对阵表3">

                                        </MudTabPanel>
                                    
                                    </MudTabs>
                                } 
                            </MudTabPanel>
                            break;
                        case RoundType.Robin:
                            <MudTabPanel Text=@($"{roundIdx}. 循环赛")>

                            </MudTabPanel>
                            break;
                        case RoundType.Elimination:
                            <MudTabPanel Text=@($"{roundIdx}. 淘汰赛")>

                            </MudTabPanel>
                            break;
                        default:
                            break;
                    }

                    idx++;
                }
            }
        </MudTabs>
    </MudPaper>
    </MudContainer>
}


@code {
    [Parameter]
    public int Id { get; set; }
    bool isAdmin = false;
    int selectId = 0;
    Dictionary<string, PCLMatchPlayer> _matchUserDatasDic;
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        try
        {
            if (user.Identity.IsAuthenticated)
            {
                //_userId = await UserServices.GetUserIdByEmail(user.Identity.Name);
                //userData = await UserServices.GetUserById(_userId);
            }
            else
            {
                PCLServices.IsAnonymous = true;
            }
            isAdmin = user.IsInRole("Admin");

            _pclMatch = await MatchService.GetMatchByIdAsync(Id);
            _matchUserDatasDic = _pclMatch.PCLMatchPlayerList.ToDictionary(s => s.UserId);
            //_userDatas = await UserServices.GetAllUser();
            selectId = _pclMatch.RoundIdx + 1;

        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }
}
