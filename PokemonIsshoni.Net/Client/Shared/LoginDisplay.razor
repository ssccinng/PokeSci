@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@inject NavigationManager Navigation
@inject SignOutSessionStateManager SignOutManager

@inject HttpClient Http
@inject AuthenticationStateProvider AuthenticationStateProvider

@inject UserInfoServices UserInfoServices

<AuthorizeView>
    <Authorized>
        <MudMenu Direction="Direction.Bottom" OffsetY="true">
            <ActivatorContent>
                <MudAvatar Image="@avatar" />
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem>个人资料</MudMenuItem>
                <MudMenuItem><button @onclick="BeginSignOut">登出</button> </MudMenuItem>
            </ChildContent>
        </MudMenu>

    </Authorized>
    <NotAuthorized>
        <MudButton Variant="Variant.Filled" Color="Color.Tertiary" Link="authentication/register">Sign In</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Default" Link="authentication/login" Class="text-white ml-2">Log In</MudButton>

    </NotAuthorized>
</AuthorizeView>

@code{
    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        Navigation.NavigateTo("authentication/logout");
    }
    //string a = "训练家";

    string avatar = null;
    string username = "训练家";
    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            var userI = (await UserInfoServices.GetUserByNameAsync(user.Identity.Name));
            avatar = userI.Avatar;
            username = userI.NickName;
        }
    }
}
