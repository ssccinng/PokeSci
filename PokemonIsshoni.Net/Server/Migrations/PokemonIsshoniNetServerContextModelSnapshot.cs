// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokemonIsshoni.Net.Server.Areas.Identity.Data;

#nullable disable

namespace PokemonIsshoni.Net.Server.Migrations
{
    [DbContext(typeof(PokemonIsshoniNetServerContext))]
    partial class PokemonIsshoniNetServerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Use")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys");
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PokemonDataAccess.Models.Ability", b =>
                {
                    b.Property<int>("AbilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name_Chs")
                        .HasColumnType("nvarchar(20)")
                        .HasComment("中文名");

                    b.Property<string>("Name_Eng")
                        .HasColumnType("varchar(40)")
                        .HasComment("英文名");

                    b.Property<string>("Name_Jpn")
                        .HasColumnType("nvarchar(20)")
                        .HasComment("日文名");

                    b.Property<string>("description_Chs")
                        .HasColumnType("nvarchar(100)")
                        .HasComment("中文描述");

                    b.Property<string>("description_Eng")
                        .HasColumnType("varchar(200)")
                        .HasComment("英文描述");

                    b.Property<string>("description_Jpn")
                        .HasColumnType("nvarchar(100)")
                        .HasComment("日文描述");

                    b.HasKey("AbilityId");

                    b.ToTable("Abilities");
                });

            modelBuilder.Entity("PokemonDataAccess.Models.Condition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name_Chs")
                        .HasColumnType("nvarchar(2)")
                        .HasComment("中文名");

                    b.Property<string>("Name_Eng")
                        .HasColumnType("varchar(10)")
                        .HasComment("英文名");

                    b.Property<string>("Name_Jpn")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("日文名");

                    b.HasKey("Id");

                    b.ToTable("Conditions");
                });

            modelBuilder.Entity("PokemonDataAccess.Models.EggGroup", b =>
                {
                    b.Property<int>("EggGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name_Chs")
                        .HasColumnType("nvarchar(20)")
                        .HasComment("中文名");

                    b.Property<string>("Name_Eng")
                        .HasColumnType("varchar(40)")
                        .HasComment("英文名");

                    b.Property<string>("Name_Jpn")
                        .HasColumnType("nvarchar(20)")
                        .HasComment("日文名");

                    b.HasKey("EggGroupId");

                    b.ToTable("Egg_Groups");
                });

            modelBuilder.Entity("PokemonDataAccess.Models.Flavor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Condition_UpId")
                        .HasColumnType("int");

                    b.Property<string>("Name_Chs")
                        .HasColumnType("nvarchar(1)")
                        .HasComment("中文名");

                    b.Property<string>("Name_Eng")
                        .HasColumnType("varchar(10)")
                        .HasComment("英文名");

                    b.Property<string>("Name_Jpn")
                        .HasColumnType("nvarchar(5)")
                        .HasComment("日文名");

                    b.Property<int?>("Performance_UpId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Condition_UpId");

                    b.HasIndex("Performance_UpId");

                    b.ToTable("Flavors");
                });

            modelBuilder.Entity("PokemonDataAccess.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Item_Type")
                        .HasColumnType("int");

                    b.Property<string>("Name_Chs")
                        .HasColumnType("nvarchar(20)")
                        .HasComment("中文名");

                    b.Property<string>("Name_Eng")
                        .HasColumnType("varchar(40)")
                        .HasComment("英文名");

                    b.Property<string>("Name_Jpn")
                        .HasColumnType("nvarchar(20)")
                        .HasComment("日文名");

                    b.Property<string>("description_Chs")
                        .HasColumnType("nvarchar(100)")
                        .HasComment("中文描述");

                    b.Property<string>("description_Eng")
                        .HasColumnType("varchar(200)")
                        .HasComment("英文描述");

                    b.Property<string>("description_Jpn")
                        .HasColumnType("nvarchar(100)")
                        .HasComment("日文描述");

                    b.HasKey("ItemId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("PokemonDataAccess.Models.Move", b =>
                {
                    b.Property<int>("MoveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Acc")
                        .HasColumnType("int");

                    b.Property<string>("Damage_Type")
                        .HasColumnType("nvarchar(6)");

                    b.Property<int?>("MoveTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name_Chs")
                        .HasColumnType("nvarchar(20)")
                        .HasComment("中文名");

                    b.Property<string>("Name_Eng")
                        .HasColumnType("varchar(40)")
                        .HasComment("英文名");

                    b.Property<string>("Name_Jpn")
                        .HasColumnType("nvarchar(20)")
                        .HasComment("日文名");

                    b.Property<int>("PP")
                        .HasColumnType("int");

                    b.Property<int?>("Pow")
                        .HasColumnType("int");

                    b.Property<string>("description_Chs")
                        .HasColumnType("nvarchar(100)")
                        .HasComment("中文描述");

                    b.Property<string>("description_Eng")
                        .HasColumnType("varchar(200)")
                        .HasComment("英文描述");

                    b.Property<string>("description_Jpn")
                        .HasColumnType("nvarchar(100)")
                        .HasComment("日文描述");

                    b.HasKey("MoveId");

                    b.HasIndex("MoveTypeId");

                    b.ToTable("Moves");
                });

            modelBuilder.Entity("PokemonDataAccess.Models.Nature", b =>
                {
                    b.Property<int>("NatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Flavor_DownId")
                        .HasColumnType("int");

                    b.Property<int?>("Flavor_UpId")
                        .HasColumnType("int");

                    b.Property<string>("Name_Chs")
                        .HasColumnType("nvarchar(5)")
                        .HasComment("中文名");

                    b.Property<string>("Name_Eng")
                        .HasColumnType("varchar(15)")
                        .HasComment("英文名");

                    b.Property<string>("Name_Jpn")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("日文名");

                    b.Property<int?>("Perf_DownId")
                        .HasColumnType("int");

                    b.Property<int?>("Perf_UpId")
                        .HasColumnType("int");

                    b.Property<int?>("Performance_value")
                        .HasColumnType("int");

                    b.Property<int?>("Stat_DownId")
                        .HasColumnType("int");

                    b.Property<int?>("Stat_UpId")
                        .HasColumnType("int");

                    b.HasKey("NatureId");

                    b.HasIndex("Flavor_DownId");

                    b.HasIndex("Flavor_UpId");

                    b.HasIndex("Perf_DownId");

                    b.HasIndex("Perf_UpId");

                    b.HasIndex("Stat_DownId");

                    b.HasIndex("Stat_UpId");

                    b.ToTable("Natures");
                });

            modelBuilder.Entity("PokemonDataAccess.Models.Performance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name_Chs")
                        .HasColumnType("nvarchar(2)")
                        .HasComment("中文名");

                    b.Property<string>("Name_Eng")
                        .HasColumnType("varchar(10)")
                        .HasComment("英文名");

                    b.Property<string>("Name_Jpn")
                        .HasColumnType("nvarchar(6)")
                        .HasComment("日文名");

                    b.HasKey("Id");

                    b.ToTable("Performances");
                });

            modelBuilder.Entity("PokemonDataAccess.Models.PokeDex", b =>
                {
                    b.Property<int>("PokeDexId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("National_Dex_Id")
                        .HasColumnType("int");

                    b.HasKey("PokeDexId");

                    b.ToTable("PokeDex");
                });

            modelBuilder.Entity("PokemonDataAccess.Models.Pokemon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Ability1AbilityId")
                        .HasColumnType("int");

                    b.Property<int?>("Ability2AbilityId")
                        .HasColumnType("int");

                    b.Property<int?>("AbilityHAbilityId")
                        .HasColumnType("int");

                    b.Property<int>("BaseAtk")
                        .HasColumnType("int");

                    b.Property<int>("BaseDef")
                        .HasColumnType("int");

                    b.Property<int>("BaseHP")
                        .HasColumnType("int");

                    b.Property<int>("BaseSpa")
                        .HasColumnType("int");

                    b.Property<int>("BaseSpd")
                        .HasColumnType("int");

                    b.Property<int>("BaseSpe")
                        .HasColumnType("int");

                    b.Property<int>("CatchRate")
                        .HasColumnType("int");

                    b.Property<int>("Color")
                        .HasColumnType("int")
                        .HasComment("0-9:红色,蓝色,绿色,黄色,紫色,粉红色,褐色,黑色,灰色,白色");

                    b.Property<bool>("DMax")
                        .HasColumnType("tinyint(1)")
                        .HasComment("能否极巨化");

                    b.Property<int>("DexId")
                        .HasColumnType("int")
                        .HasComment("全国图鉴编号");

                    b.Property<int>("EVAtk")
                        .HasColumnType("int");

                    b.Property<int>("EVDef")
                        .HasColumnType("int");

                    b.Property<int>("EVHP")
                        .HasColumnType("int");

                    b.Property<int>("EVSpa")
                        .HasColumnType("int");

                    b.Property<int>("EVSpd")
                        .HasColumnType("int");

                    b.Property<int>("EVSpe")
                        .HasColumnType("int");

                    b.Property<int>("EXPGroup")
                        .HasColumnType("int")
                        .HasComment("1:Erratic,2:Fast,3:Medium Fast,4:Medium Slow,5:Slow");

                    b.Property<int?>("EggGroup1EggGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("EggGroup2EggGroupId")
                        .HasColumnType("int");

                    b.Property<string>("FormNameChs")
                        .HasColumnType("nvarchar(30)")
                        .HasComment("形态名");

                    b.Property<string>("FormNameEng")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("FormNameJpn")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FullNameChs")
                        .HasColumnType("nvarchar(30)")
                        .HasComment("全名");

                    b.Property<string>("FullNameEng")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("FullNameJpn")
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("GenderRatio")
                        .HasColumnType("int")
                        .HasComment("♀/(♂+♀)=(GenderRatio+1)/(255+1),254雌性,255无性别");

                    b.Property<int>("HatchCycles")
                        .HasColumnType("int")
                        .HasComment("孵化周期");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("NameChs")
                        .HasColumnType("nvarchar(20)")
                        .HasComment("中文名");

                    b.Property<string>("NameEng")
                        .HasColumnType("varchar(40)")
                        .HasComment("英文名");

                    b.Property<string>("NameJpn")
                        .HasColumnType("nvarchar(20)")
                        .HasComment("日文名");

                    b.Property<int?>("PokeDexId")
                        .HasColumnType("int");

                    b.Property<int>("PokeFormId")
                        .HasColumnType("int")
                        .HasComment("形态编号");

                    b.Property<int>("Stage")
                        .HasColumnType("int")
                        .HasComment("意味無し");

                    b.Property<int?>("Type1Id")
                        .HasColumnType("int");

                    b.Property<int?>("Type2Id")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(4,1)");

                    b.HasKey("Id");

                    b.HasIndex("Ability1AbilityId");

                    b.HasIndex("Ability2AbilityId");

                    b.HasIndex("AbilityHAbilityId");

                    b.HasIndex("EggGroup1EggGroupId");

                    b.HasIndex("EggGroup2EggGroupId");

                    b.HasIndex("PokeDexId");

                    b.HasIndex("Type1Id");

                    b.HasIndex("Type2Id");

                    b.ToTable("Pokemons");
                });

            modelBuilder.Entity("PokemonDataAccess.Models.PokeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name_Chs")
                        .HasColumnType("nvarchar(5)")
                        .HasComment("中文名");

                    b.Property<string>("Name_Eng")
                        .HasColumnType("varchar(20)")
                        .HasComment("英文名");

                    b.Property<string>("Name_Jpn")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("日文名");

                    b.HasKey("Id");

                    b.ToTable("PokeTypes");
                });

            modelBuilder.Entity("PokemonDataAccess.Models.PSPokemon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AllValue")
                        .HasColumnType("int");

                    b.Property<string>("PSChsName")
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PSImgName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PSName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PokemonId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PokemonId");

                    b.ToTable("PSPokemons");
                });

            modelBuilder.Entity("PokemonDataAccess.Models.Statistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("FlavorId")
                        .HasColumnType("int");

                    b.Property<string>("Name_Chs")
                        .HasColumnType("nvarchar(3)")
                        .HasComment("中文名");

                    b.Property<string>("Name_Eng")
                        .HasColumnType("varchar(20)")
                        .HasComment("英文名");

                    b.Property<string>("Name_Jpn")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("日文名");

                    b.HasKey("Id");

                    b.HasIndex("FlavorId");

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("PokemonDataAccess.Models.TypeEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Effect")
                        .HasColumnType("decimal(2,1)");

                    b.Property<int?>("Type1Id")
                        .HasColumnType("int");

                    b.Property<int?>("Type2Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Type1Id");

                    b.HasIndex("Type2Id");

                    b.ToTable("TypeEffect");
                });

            modelBuilder.Entity("PokemonIsshoni.Net.Server.Areas.Identity.Data.PokemonIsshoniNetServerUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("GS")
                        .HasColumnType("int");

                    b.Property<string>("HomeName")
                        .IsRequired()
                        .HasColumnType("varchar(40)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("QQ")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("Registertime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<int>("TrainerIdInt")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("PokemonIsshoni.Net.Shared.Models.PCLBattle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PCLBattleState")
                        .HasColumnType("int");

                    b.Property<int>("PCLMatchId")
                        .HasColumnType("int");

                    b.Property<int>("PCLMatchRoundId")
                        .HasColumnType("int");

                    b.Property<int?>("PCLRoundPlayerId")
                        .HasColumnType("int");

                    b.Property<string>("Player1Id")
                        .HasColumnType("varchar(270)");

                    b.Property<int>("Player1MiniScore")
                        .HasColumnType("int");

                    b.Property<int>("Player1Score")
                        .HasColumnType("int");

                    b.Property<int>("Player1TeamId")
                        .HasColumnType("int");

                    b.Property<string>("Player2Id")
                        .HasColumnType("varchar(270)");

                    b.Property<int>("Player2MiniScore")
                        .HasColumnType("int");

                    b.Property<int>("Player2Score")
                        .HasColumnType("int");

                    b.Property<int>("Player2TeamId")
                        .HasColumnType("int");

                    b.Property<bool>("Submitted")
                        .IsConcurrencyToken()
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Tag")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PCLMatchId");

                    b.HasIndex("PCLMatchRoundId");

                    b.HasIndex("PCLRoundPlayerId");

                    b.HasIndex("Player1TeamId");

                    b.HasIndex("Player2TeamId");

                    b.ToTable("PCLBattles");
                });

            modelBuilder.Entity("PokemonIsshoni.Net.Shared.Models.PCLMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AllowGuest")
                        .IsConcurrencyToken()
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CanCancelSign")
                        .IsConcurrencyToken()
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsTeamCompeition")
                        .IsConcurrencyToken()
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LimitPlayer")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("MatchEndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MatchOnline")
                        .HasColumnType("int");

                    b.Property<DateTime?>("MatchStartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("MatchState")
                        .HasColumnType("int");

                    b.Property<int>("MatchType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("NeedCheck")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("RoundIdx")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(270)");

                    b.HasKey("Id");

                    b.ToTable("PCLMatchs");
                });

            modelBuilder.Entity("PokemonIsshoni.Net.Shared.Models.PCLMatchPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Declaration")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PCLMatchId")
                        .HasColumnType("int");

                    b.Property<int?>("PCLMatchTeamGroupId")
                        .HasColumnType("int");

                    b.Property<int>("PreTeamId")
                        .HasColumnType("int");

                    b.Property<string>("QQ")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ShadowId")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(270)");

                    b.HasKey("Id");

                    b.HasIndex("PCLMatchId");

                    b.HasIndex("PCLMatchTeamGroupId");

                    b.HasIndex("PreTeamId");

                    b.ToTable("PCLMatchPlayers");
                });

            modelBuilder.Entity("PokemonIsshoni.Net.Shared.Models.PCLMatchRound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AcceptTeamSubmit")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("BO")
                        .HasColumnType("int");

                    b.Property<bool>("CanSeeOppTeam")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("DrawScore")
                        .HasColumnType("int");

                    b.Property<int>("EliminationType")
                        .HasColumnType("int");

                    b.Property<int>("GroupCnt")
                        .HasColumnType("int");

                    b.Property<bool>("IsGroup")
                        .IsConcurrencyToken()
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockTeam")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("LoseScore")
                        .HasColumnType("int");

                    b.Property<int>("PCLMatchId")
                        .HasColumnType("int");

                    b.Property<int>("PCLRoundState")
                        .IsConcurrencyToken()
                        .HasColumnType("int");

                    b.Property<int>("PCLRoundType")
                        .HasColumnType("int");

                    b.Property<int>("RoundPromotion")
                        .HasColumnType("int");

                    b.Property<int>("SwissCount")
                        .HasColumnType("int");

                    b.Property<int>("SwissPromotionType")
                        .HasColumnType("int");

                    b.Property<int>("Swissidx")
                        .HasColumnType("int");

                    b.Property<int>("WinScore")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PCLMatchId");

                    b.ToTable("PCLMatchRounds");
                });

            modelBuilder.Entity("PokemonIsshoni.Net.Shared.Models.PCLMatchTeamGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CaptainId")
                        .IsRequired()
                        .HasColumnType("varchar(270)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("PCLMatchTeamGroup");
                });

            modelBuilder.Entity("PokemonIsshoni.Net.Shared.Models.PCLPokeTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("PSText")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("TeamData")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PCLPokeTeams");
                });

            modelBuilder.Entity("PokemonIsshoni.Net.Shared.Models.PCLRoundPlayer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BattleTeamId")
                        .HasColumnType("int");

                    b.Property<int>("Draw")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("HasBye")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDrop")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("Lose")
                        .HasColumnType("int");

                    b.Property<int>("MiniScore")
                        .HasColumnType("int");

                    b.Property<decimal>("OppOppRatio")
                        .HasColumnType("decimal(8,6)");

                    b.Property<decimal>("OppRatio")
                        .HasColumnType("decimal(8,6)");

                    b.Property<int>("PCLMatchRoundId")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int>("Tag")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(270)");

                    b.Property<int>("Win")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BattleTeamId");

                    b.HasIndex("PCLMatchRoundId");

                    b.ToTable("PCLRoundPlayers");
                });

            modelBuilder.Entity("PokemonIsshoni.Net.Shared.Models.Referee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PCLMatchId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(270)");

                    b.HasKey("Id");

                    b.HasIndex("PCLMatchId");

                    b.ToTable("PCLReferees");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PokemonIsshoni.Net.Server.Areas.Identity.Data.PokemonIsshoniNetServerUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PokemonIsshoni.Net.Server.Areas.Identity.Data.PokemonIsshoniNetServerUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonIsshoni.Net.Server.Areas.Identity.Data.PokemonIsshoniNetServerUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PokemonIsshoni.Net.Server.Areas.Identity.Data.PokemonIsshoniNetServerUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokemonDataAccess.Models.Flavor", b =>
                {
                    b.HasOne("PokemonDataAccess.Models.Condition", "Condition_Up")
                        .WithMany()
                        .HasForeignKey("Condition_UpId");

                    b.HasOne("PokemonDataAccess.Models.Performance", "Performance_Up")
                        .WithMany()
                        .HasForeignKey("Performance_UpId");

                    b.Navigation("Condition_Up");

                    b.Navigation("Performance_Up");
                });

            modelBuilder.Entity("PokemonDataAccess.Models.Move", b =>
                {
                    b.HasOne("PokemonDataAccess.Models.PokeType", "MoveType")
                        .WithMany()
                        .HasForeignKey("MoveTypeId");

                    b.Navigation("MoveType");
                });

            modelBuilder.Entity("PokemonDataAccess.Models.Nature", b =>
                {
                    b.HasOne("PokemonDataAccess.Models.Flavor", "Flavor_Down")
                        .WithMany()
                        .HasForeignKey("Flavor_DownId");

                    b.HasOne("PokemonDataAccess.Models.Flavor", "Flavor_Up")
                        .WithMany()
                        .HasForeignKey("Flavor_UpId");

                    b.HasOne("PokemonDataAccess.Models.Performance", "Perf_Down")
                        .WithMany()
                        .HasForeignKey("Perf_DownId");

                    b.HasOne("PokemonDataAccess.Models.Performance", "Perf_Up")
                        .WithMany()
                        .HasForeignKey("Perf_UpId");

                    b.HasOne("PokemonDataAccess.Models.Statistic", "Stat_Down")
                        .WithMany()
                        .HasForeignKey("Stat_DownId");

                    b.HasOne("PokemonDataAccess.Models.Statistic", "Stat_Up")
                        .WithMany()
                        .HasForeignKey("Stat_UpId");

                    b.Navigation("Flavor_Down");

                    b.Navigation("Flavor_Up");

                    b.Navigation("Perf_Down");

                    b.Navigation("Perf_Up");

                    b.Navigation("Stat_Down");

                    b.Navigation("Stat_Up");
                });

            modelBuilder.Entity("PokemonDataAccess.Models.Pokemon", b =>
                {
                    b.HasOne("PokemonDataAccess.Models.Ability", "Ability1")
                        .WithMany()
                        .HasForeignKey("Ability1AbilityId");

                    b.HasOne("PokemonDataAccess.Models.Ability", "Ability2")
                        .WithMany()
                        .HasForeignKey("Ability2AbilityId");

                    b.HasOne("PokemonDataAccess.Models.Ability", "AbilityH")
                        .WithMany()
                        .HasForeignKey("AbilityHAbilityId");

                    b.HasOne("PokemonDataAccess.Models.EggGroup", "EggGroup1")
                        .WithMany()
                        .HasForeignKey("EggGroup1EggGroupId");

                    b.HasOne("PokemonDataAccess.Models.EggGroup", "EggGroup2")
                        .WithMany()
                        .HasForeignKey("EggGroup2EggGroupId");

                    b.HasOne("PokemonDataAccess.Models.PokeDex", null)
                        .WithMany("Pokemon_Form_List")
                        .HasForeignKey("PokeDexId");

                    b.HasOne("PokemonDataAccess.Models.PokeType", "Type1")
                        .WithMany()
                        .HasForeignKey("Type1Id");

                    b.HasOne("PokemonDataAccess.Models.PokeType", "Type2")
                        .WithMany()
                        .HasForeignKey("Type2Id");

                    b.Navigation("Ability1");

                    b.Navigation("Ability2");

                    b.Navigation("AbilityH");

                    b.Navigation("EggGroup1");

                    b.Navigation("EggGroup2");

                    b.Navigation("Type1");

                    b.Navigation("Type2");
                });

            modelBuilder.Entity("PokemonDataAccess.Models.PSPokemon", b =>
                {
                    b.HasOne("PokemonDataAccess.Models.Pokemon", "Pokemon")
                        .WithMany()
                        .HasForeignKey("PokemonId");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("PokemonDataAccess.Models.Statistic", b =>
                {
                    b.HasOne("PokemonDataAccess.Models.Flavor", "Flavor")
                        .WithMany()
                        .HasForeignKey("FlavorId");

                    b.Navigation("Flavor");
                });

            modelBuilder.Entity("PokemonDataAccess.Models.TypeEffect", b =>
                {
                    b.HasOne("PokemonDataAccess.Models.PokeType", "Type1")
                        .WithMany()
                        .HasForeignKey("Type1Id");

                    b.HasOne("PokemonDataAccess.Models.PokeType", "Type2")
                        .WithMany()
                        .HasForeignKey("Type2Id");

                    b.Navigation("Type1");

                    b.Navigation("Type2");
                });

            modelBuilder.Entity("PokemonIsshoni.Net.Shared.Models.PCLBattle", b =>
                {
                    b.HasOne("PokemonIsshoni.Net.Shared.Models.PCLMatch", "PCLMatch")
                        .WithMany()
                        .HasForeignKey("PCLMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonIsshoni.Net.Shared.Models.PCLMatchRound", "PCLMatchRound")
                        .WithMany()
                        .HasForeignKey("PCLMatchRoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonIsshoni.Net.Shared.Models.PCLRoundPlayer", null)
                        .WithMany("PCLBattles")
                        .HasForeignKey("PCLRoundPlayerId");

                    b.HasOne("PokemonIsshoni.Net.Shared.Models.PCLPokeTeam", "Player1Team")
                        .WithMany()
                        .HasForeignKey("Player1TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonIsshoni.Net.Shared.Models.PCLPokeTeam", "Player2Team")
                        .WithMany()
                        .HasForeignKey("Player2TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PCLMatch");

                    b.Navigation("PCLMatchRound");

                    b.Navigation("Player1Team");

                    b.Navigation("Player2Team");
                });

            modelBuilder.Entity("PokemonIsshoni.Net.Shared.Models.PCLMatchPlayer", b =>
                {
                    b.HasOne("PokemonIsshoni.Net.Shared.Models.PCLMatch", null)
                        .WithMany("PCLMatchPlayerList")
                        .HasForeignKey("PCLMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonIsshoni.Net.Shared.Models.PCLMatchTeamGroup", "PCLMatchTeamGroup")
                        .WithMany("PCLMatchPlayers")
                        .HasForeignKey("PCLMatchTeamGroupId");

                    b.HasOne("PokemonIsshoni.Net.Shared.Models.PCLPokeTeam", "PreTeam")
                        .WithMany()
                        .HasForeignKey("PreTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PCLMatchTeamGroup");

                    b.Navigation("PreTeam");
                });

            modelBuilder.Entity("PokemonIsshoni.Net.Shared.Models.PCLMatchRound", b =>
                {
                    b.HasOne("PokemonIsshoni.Net.Shared.Models.PCLMatch", null)
                        .WithMany("PCLMatchRoundList")
                        .HasForeignKey("PCLMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokemonIsshoni.Net.Shared.Models.PCLRoundPlayer", b =>
                {
                    b.HasOne("PokemonIsshoni.Net.Shared.Models.PCLPokeTeam", "BattleTeam")
                        .WithMany()
                        .HasForeignKey("BattleTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonIsshoni.Net.Shared.Models.PCLMatchRound", null)
                        .WithMany("PCLRoundPlayers")
                        .HasForeignKey("PCLMatchRoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BattleTeam");
                });

            modelBuilder.Entity("PokemonIsshoni.Net.Shared.Models.Referee", b =>
                {
                    b.HasOne("PokemonIsshoni.Net.Shared.Models.PCLMatch", null)
                        .WithMany("PCLMatchRefereeList")
                        .HasForeignKey("PCLMatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokemonDataAccess.Models.PokeDex", b =>
                {
                    b.Navigation("Pokemon_Form_List");
                });

            modelBuilder.Entity("PokemonIsshoni.Net.Shared.Models.PCLMatch", b =>
                {
                    b.Navigation("PCLMatchPlayerList");

                    b.Navigation("PCLMatchRefereeList");

                    b.Navigation("PCLMatchRoundList");
                });

            modelBuilder.Entity("PokemonIsshoni.Net.Shared.Models.PCLMatchRound", b =>
                {
                    b.Navigation("PCLRoundPlayers");
                });

            modelBuilder.Entity("PokemonIsshoni.Net.Shared.Models.PCLMatchTeamGroup", b =>
                {
                    b.Navigation("PCLMatchPlayers");
                });

            modelBuilder.Entity("PokemonIsshoni.Net.Shared.Models.PCLRoundPlayer", b =>
                {
                    b.Navigation("PCLBattles");
                });
#pragma warning restore 612, 618
        }
    }
}
